local flow = require "ludobits.m.flow"

function init(self)
	msg.post(".", "acquire_input_focus")
	flow(function()
		print("Flow has started")
		
		-- wait until 0.5 seconds have elapsed
		flow.delay(0.5)
		print("flow.delay() half a second has elapsed")
		
		-- wait until 10 updates/frames have been registered for this flow
		flow.frames(10)
		print("flow.frames() 10 frames have elapsed")
		
		print("Waiting for input")
		local action_id, action = flow.until_input_released(hash("touch"))
		print("flow.until_input_released()", action_id)
		
		-- load a collection proxy and wait for it to become loaded
		flow.load("#a_proxy")
		print("flow.load() a_proxy loaded")

		-- the running flow will wait for this flow to finish
		flow(function()
		
			-- animate a game object and wait until it's position is a specific value
			go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, 500, go.EASING_INOUTCUBIC, 1, 0)
			flow.until_true(function()
				return go.get_position().x == 500
			end)
			print("flow.until_true() go.animate() done")
	
			-- flows can be nested to any depth
			flow(function()
				flow.delay(1)
		
				flow.load("#b_proxy")
				print("flow.load() b_proxy loaded")
			end)
			
			flow.go_animate(".", "position.y", go.PLAYBACK_ONCE_PINGPONG, 500, go.EASING_INOUTCUBIC, 1, 0)
			print("flow.go_animate() done")
		end)

		-- unload a collection proxy and wait until it is unloaded
		flow.unload("#a_proxy")
		print("flow.unload() a_proxy unloaded")
		
		-- the running flow will not wait for this flow to finish
		flow(function()
			print("Parallel flow starting")
			flow.delay(2)
			print("The outer flow did not wait for me")
			msg.post("#", "fooo")
			flow.delay(0.2)
			msg.post("#", "abc")
			flow.delay(0.2)
			msg.post("#", "booo")

			flow.delay(0.2)
			msg.post("#", "msg3")
			flow.delay(0.2)
			msg.post("#", "msg1")
			flow.delay(0.2)
			msg.post("#", "msg2")
		end, { parallel = true })
		
		print("This flow will continue to run without waiting for the parallel flow to finish")
		
		-- wait for any message (the message will be posted by the parallel flow created above)
		local message_id, message, sender = flow.until_any_message()
		print("flow.until_any_message()", message_id, message, sender)
		
		-- wait for a specific message (the message will be posted by the parallel flow created above)
		local message_id, message, sender = flow.until_message(hash("booo"))
		print("flow.until_message()", message_id, message, sender)

		-- wait for all specific messages
		print("Waiting for all specified messages...")
		flow(function()
			local last_message_id, last_message, last_sender = flow.until_all_messages(hash("msg1"), hash("msg2"), hash("msg3"))
			print("flow.until_all_messages()", last_message_id, last_message, last_sender)
		end)
		
		-- wait until a callback is invoked
		-- in this case we make a http.request call and wait for the callback
		local self, id, response = flow.until_callback(function(callback)
			http.request("http://www.google.com", "GET", callback)
		end)
		print("flow.until_callback() http.request() with callback done", response.status)
		
		-- waiting for a callback must also work when the callback is
		-- invoked immediately (as opposed to the result of some async operation)
		local foo, bar = flow.until_callback(function(callback)
			callback("foo", "bar")
		end)
		print("flow.until_callback() immediate callback", foo, bar)

		flow.load("#a_proxy")
		print("flow.load() a_proxy loaded")

		-- play a sprite animation and wait until it is done
		flow.play_animation("#sprite", "green_walk_once")
		print("flow.play_animation() is done")

		-- start two parallel flows and store them to the table "foo"
		print("Parallel flows stored to the table 'foo' are starting")
		local foo = {}

		-- start a first parallel flow
		foo[1] = flow.start(function()
			flow.delay(math.random())
			print("Parallel flow foo 1 completed")
		end)

		-- start a second parallel flow
		foo[2] = flow.start(function()
			flow.delay(math.random())
			print("Parallel flow foo 2 completed")
		end)

		-- wait until all the flows in the table "foo" have completed
		flow.until_flows(foo)
		print("All the parallel stored to the table completed")

		-- start two parallel flows with the same group_id "bar"
		print("Parallel flows with group_id 'bar' are starting")

		-- start a parallel flow with the group_id "bar"
		flow.parallel_group("bar", function()
			flow.delay(math.random())
			print("Parallel flow bar 1 completed")
		end)

		-- start an another parallel flow with the group_id "bar"
		flow.parallel_group("bar", function()
			flow.delay(math.random())
			print("Parallel flow bar 2 completed")
		end)

		-- wait until all the flows with the group_id "bar" have completed
		flow.until_group("bar")
		print("All the parallel flows with group_id 'bar' completed")

		print("DONE")
	end)
	
	flow(function()
		print("In another flow")
		flow.delay(1)
		error("Crashing the flow")
		print("This will not print")
	end, nil, function(error)
		print("Something went wrong in my flow!", error)
	end)
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	flow.on_input(action_id, action)
end
